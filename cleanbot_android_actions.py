from flask import Flask, request
from threading import Thread
import broadlink

broadlink_ip = '10.10.2.137'


device = broadlink.hello(broadlink_ip)  # IP address of your Broadlink device.
device.auth()
forward = b'&\x00\x90\x00\x00\x01)\x92\x14\x11\x14\x10\x15\x10\x14\x11\x14\x11\x14\x11\x14\x10\x15\x10\x146\x145\x155\x145\x155\x146\x145\x146\x145\x155\x14\x11\x14\x10\x155\x14\x11\x14\x11\x14\x10\x15\x10\x14\x11\x146\x145\x14\x11\x145\x155\x146\x14\x00\x05%\x00\x01*\x91\x15\x10\x14\x11\x14\x11\x14\x10\x15\x10\x14\x11\x14\x11\x14\x11\x145\x146\x145\x146\x145\x155\x146\x145\x146\x145\x15\x10\x14\x11\x145\x15\x10\x14\x11\x14\x11\x14\x10\x15\x10\x155\x145\x15\x10\x146\x145\x155\x14\x00\r\x05\x00\x00\x00\x00\x00\x00\x00\x00'
backward = b"&\x00\x90\x00\x00\x01'\x94\x12\x13\x12\x12\x13\x12\x12\x13\x12\x13\x12\x13\x12\x12\x13\x12\x128\x127\x128\x128\x127\x128\x127\x128\x127\x137\x12\x13\x12\x13\x12\x12\x13\x12\x12\x13\x12\x13\x12\x13\x12\x12\x128\x127\x137\x128\x127\x128\x12\x00\x05(\x00\x01'\x94\x12\x13\x12\x12\x13\x12\x12\x13\x12\x13\x12\x13\x12\x12\x12\x13\x128\x127\x128\x127\x128\x128\x127\x128\x127\x128\x11\x14\x12\x12\x13\x12\x12\x13\x12\x13\x12\x13\x12\x12\x13\x12\x128\x127\x128\x127\x137\x128\x12\x00\r\x05\x00\x00\x00\x00\x00\x00\x00\x00"
rotate_left = b"&\x00\x90\x00\x00\x01'\x94\x12\x12\x13\x12\x12\x13\x12\x13\x11\x14\x12\x12\x12\x13\x12\x13\x127\x137\x128\x127\x128\x127\x128\x127\x137\x128\x127\x12\x13\x12\x13\x12\x13\x12\x12\x12\x13\x12\x13\x12\x13\x12\x12\x137\x128\x127\x128\x127\x12\x00\x05(\x00\x01'\x94\x12\x13\x12\x12\x13\x12\x12\x13\x12\x13\x12\x13\x12\x12\x13\x12\x128\x127\x128\x127\x137\x128\x127\x128\x127\x128\x127\x13\x12\x12\x13\x12\x13\x12\x13\x12\x12\x13\x12\x12\x13\x12\x13\x127\x128\x127\x137\x128\x12\x00\r\x05\x00\x00\x00\x00\x00\x00\x00\x00"
rotate_right = b"&\x00\xd8\x00\x00\x01(\x93\x12\x13\x12\x13\x12\x13\x12\x12\x13\x12\x12\x13\x12\x13\x12\x13\x127\x128\x127\x137\x128\x127\x128\x127\x128\x127\x137\x128\x12\x12\x12\x13\x12\x13\x12\x13\x12\x12\x13\x12\x12\x13\x12\x13\x127\x137\x128\x127\x12\x00\x05&\x00\x01)\x94\x12\x13\x12\x13\x12\x12\x13\x12\x12\x13\x12\x13\x12\x12\x13\x12\x128\x127\x137\x128\x127\x126\x147\x128\x127\x128\x127\x137\x12\x13\x12\x13\x12\x12\x12\x13\x12\x13\x12\x13\x12\x12\x13\x12\x128\x127\x128\x127\x13\x00\x05'\x00\x01'\x94\x12\x13\x12\x13\x12\x12\x13\x12\x12\x13\x12\x13\x12\x13\x12\x12\x128\x127\x137\x127\x137\x128\x127\x128\x127\x128\x127\x128\x12\x13\x12\x12\x12\x13\x12\x13\x12\x13\x12\x12\x13\x12\x12\x13\x128\x127\x128\x127\x12\x00\r\x05"
home = b"&\x00P\x00\x00\x01'\x94\x12\x13\x12\x13\x12\x12\x13\x12\x12\x13\x11\x14\x12\x13\x12\x12\x137\x128\x127\x128\x127\x128\x127\x128\x12\x13\x127\x128\x118\x12\x13\x12\x13\x11\x14\x11\x13\x128\x12\x13\x11\x13\x12\x13\x128\x127\x128\x127\x13\x00\x05'\x00\x01'K\x12\x00\r\x05\x00\x00\x00\x00\x00\x00\x00\x00"
random = b"&\x00`\x00\x00\x01(\x93\x13\x12\x12\x13\x12\x13\x12\x13\x12\x12\x12\x13\x12\x13\x12\x13\x127\x128\x128\x127\x128\x127\x128\x127\x12\x13\x12\x13\x12\x13\x127\x12\x13\x12\x13\x12\x13\x12\x12\x137\x128\x127\x12\x13\x127\x137\x128\x127\x12\x00\x05(\x00\x01'K\x12\x00\x0cW\x00\x01'K\x12\x00\x0cW\x00\x01'K\x12\x00\r\x05\x00\x00\x00\x00\x00\x00\x00\x00"
spot = b"&\x00P\x00\x00\x01'\x94\x12\x13\x12\x12\x13\x12\x12\x13\x12\x13\x12\x13\x12\x12\x12\x13\x128\x118\x128\x127\x128\x127\x137\x127\x13\x12\x128\x12\x13\x12\x12\x12\x13\x12\x13\x12\x13\x12\x12\x137\x12\x13\x127\x128\x127\x137\x127\x137\x12\x00\x05'\x00\x01(J\x13\x00\r\x05\x00\x00\x00\x00\x00\x00\x00\x00"
play = b"&\x00P\x00\x00\x01(\x94\x12\x12\x13\x12\x12\x13\x12\x13\x12\x13\x11\x13\x12\x13\x12\x13\x127\x137\x128\x127\x128\x127\x128\x127\x128\x119\x12\x12\x128\x12\x13\x12\x13\x11\x13\x12\x13\x12\x13\x11\x14\x127\x12\x13\x119\x118\x128\x118\x12\x00\x05(\x00\x01'K\x12\x00\r\x05\x00\x00\x00\x00\x00\x00\x00\x00"
# device.enter_learning()
# time.sleep(100)
# packet = device.check_data()


def take_action(action):
    if action == "forward":
        return device.send_data(forward)
    elif action == "backward":
        return device.send_data(backward)
    elif action == "rotate_left":
        return device.send_data(rotate_left)
    elif action == "rotate_right":
        return device.send_data(rotate_right)
    elif action == "dog_found":
        print("mission complete")
        return exit()
    else:
        return print(f"{action} is not a valid option")


# Flask app setup
app = Flask(__name__)

@app.route('/motion', methods=['POST'])
def handle_motion():
    motion = request.json.get('motion')
    response = play_motion_from_api(motion)
    return f'Motion {motion} executed with {response}'

def play_motion_from_api(motion):
    if motion == "forward":
        take_action("forward")
        return "Robot moving forward"
    elif motion == "backward":
        take_action("backward")
        return "Robot moving backward"
    elif motion == "rotate_left":
        take_action("rotate_left")
        return "Robot turning left"
    elif motion == "rotate_right":
        take_action("rotate_right")
        return "Robot rotating right"
    elif motion == "dog_found":
        take_action("dog_found")
        return "Robot found dog"
    else:
        return "Invalid motion"

def start_flask():
    app.run(host='0.0.0.0', port=5000)

# Start Flask in a separate thread
flask_thread = Thread(target=start_flask)
flask_thread.start()